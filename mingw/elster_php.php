<?php

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// Try to load our extension if it's not already loaded.
if (!extension_loaded('elster_php')) {
  if (strtolower(substr(PHP_OS, 0, 3)) === 'win') {
    if (!dl('php_elster_php.dll')) return;
  } else {
    // PHP_SHLIB_SUFFIX gives 'dylib' on MacOS X but modules are 'so'.
    if (PHP_SHLIB_SUFFIX === 'dylib') {
      if (!dl('elster_php.so')) return;
    } else {
      if (!dl('elster_php.'.PHP_SHLIB_SUFFIX)) return;
    }
  }
}



/* PHP Proxy Classes */
class elster {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_elster_php_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_elster_php_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	static function geterrormsg() {
		return elster_geterrormsg();
	}

	static function getvaluemsg() {
		return elster_getvaluemsg();
	}

	static function getvalue($arg1) {
		return elster_getvalue($arg1);
	}

	static function setvalue($arg1) {
		return elster_setvalue($arg1);
	}

	static function setbits($arg1) {
		return elster_setbits($arg1);
	}

	static function clrbits($arg1) {
		return elster_clrbits($arg1);
	}

	static function getstring($arg1) {
		return elster_getstring($arg1);
	}

	static function setstring($params) {
		return elster_setstring($params);
	}

	static function getname($arg1) {
		return elster_getname($arg1);
	}

	static function gettype($arg1) {
		return elster_gettype($arg1);
	}

	static function toggle_trace() {
		return elster_toggle_trace();
	}

	static function setdev($arg1) {
		return elster_setdev($arg1);
	}

	static function setcs() {
		return elster_setcs();
	}

	static function set_can232() {
		return elster_set_can232();
	}

	static function initcan() {
		return elster_initcan();
	}

	static function undef() {
		elster_undef();
	}

	static function setsniffedframe($params) {
		return elster_setsniffedframe($params);
	}

	static function getsniffedvalue($params) {
		return elster_getsniffedvalue($params);
	}

	static function getfirstsniffedvalue($params) {
		return elster_getfirstsniffedvalue($params);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_elster') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_elster();
	}
}


?>
