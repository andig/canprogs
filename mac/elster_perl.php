<?php

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.9
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// Try to load our extension if it's not already loaded.
if (!extension_loaded('elster_perl')) {
  if (strtolower(substr(PHP_OS, 0, 3)) === 'win') {
    if (!dl('php_elster_perl.dll')) return;
  } else {
    // PHP_SHLIB_SUFFIX gives 'dylib' on MacOS X but modules are 'so'.
    if (PHP_SHLIB_SUFFIX === 'dylib') {
      if (!dl('elster_perl.so')) return;
    } else {
      if (!dl('elster_perl.'.PHP_SHLIB_SUFFIX)) return;
    }
  }
}



abstract class elster_perl {
	static function geterrormsg() {
		return geterrormsg();
	}

	static function getvaluemsg() {
		return getvaluemsg();
	}

	static function getvalue($arg1) {
		return getvalue($arg1);
	}

	static function setvalue($arg1) {
		return setvalue($arg1);
	}

	static function setbits($arg1) {
		return setbits($arg1);
	}

	static function clrbits($arg1) {
		return clrbits($arg1);
	}

	static function getstring($arg1) {
		return getstring($arg1);
	}

	static function setstring($params) {
		return setstring($params);
	}

	static function getname($arg1) {
		return getname($arg1);
	}

	static function gettype($arg1) {
		return gettype($arg1);
	}

	static function toggle_trace() {
		return toggle_trace();
	}

	static function setdev($arg1) {
		return setdev($arg1);
	}

	static function setcs() {
		return setcs();
	}

	static function set_can232() {
		return set_can232();
	}

	static function initcan() {
		return initcan();
	}

	static function undef() {
		undef();
	}

	static function setsniffedframe($params) {
		return setsniffedframe($params);
	}

	static function getsniffedvalue($params) {
		return getsniffedvalue($params);
	}

	static function getfirstsniffedvalue($params) {
		return getfirstsniffedvalue($params);
	}
}

/* PHP Proxy Classes */

?>
